[flake8]
select = B,C,E,F,I,W,T4

# Base flake8 configuration:
# https://flake8.pycqa.org/en/latest/user/configuration.html
format = wemake
show-source = True
statistics = False
doctests = True

# Plugins:
max-complexity = 18
# 88 for compatibility with black, set 80 otherwise
max-line-length = 88
# strings are in single or double quotes
inline-quotes = double

# # wemake-python-styleguide settings:
# i-control-code = True

extend-ignore = E203, E266, E501, W503
# Disable some pydocstyle checks:
# Exclude some pydoctest checks globally:
ignore =
    # missing trailing comma (Black won't enforce this rule)
    C812
    # Missing docstring in public module
    D100
    # Missing docstring in public package
    D104
    # Missing docstring in public nested class
    D106
    # First line should be in imperative mood
    D401
    # per-file ignoring (better to live)
    X100
    # Unknown directive type "XXX".
    RST303
    # Unknown interpreted text role "XXX".
    RST304
    # Darglint configuration
    # The docstring parameter type doesn't match function.
    # DAR103
    # The docstring parameter type doesn't match function.
    # DAR203
    # Incorrect indentation (in docstrings)
    DAR003
    # Inline substitution_reference start-string without end-string.
    RST219
    # Unexpected indentation (when the doc is written with sphinx, but we use mkdocs).
    RST201
    RST203
    RST214
    RST215
    RST301

# Excluding some directories:
exclude =
    .git
    __pycache__
    .venv
    .eggs
    *.egg
    # add the following directories
    .venv
    .mypy_cache
    .vscode

# Ignoring some errors in some files:
per-file-ignores =
  # Enable `assert` keyword and magic numbers for tests:
  tests/*.py: S101, WPS226, WPS432, WPS442, WPS202

[radon]
show_complexity = true
average = True
order = score
show_mi = True

[darglint]
# darglint configuration:
# https://github.com/terrencepreilly/darglint
strictness = long
message_template={path}:{obj}:{line} -> {msg_id}:{msg}


[mypy]
# mypy configurations: http://bit.ly/2zEl9WI
files =
  app/
allow_redefinition = False
check_untyped_defs = True
disallow_any_explicit = False
disallow_any_generics = True
disallow_untyped_calls = False
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
local_partial_types = True
strict_optional = True
strict_equality = True
no_implicit_optional = True
warn_no_return = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True


[coverage:run]
# directory to run coverage on
source = app/


[coverage:report]
# do not consider the following lines during coverage calculation
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
